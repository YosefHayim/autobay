extend type Query {
  """
  ✨ Look up a single `Integration` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  integration(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Integration_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Integration_FirstRow
  ): Integration @fdc_generated(from: "Integration", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Order` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  order(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Order_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Order_FirstRow
  ): Order @fdc_generated(from: "Order", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ProductTemplate` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  productTemplate(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ProductTemplate_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ProductTemplate_FirstRow
  ): ProductTemplate @fdc_generated(from: "ProductTemplate", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `eBayListing` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  eBayListing(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: eBayListing_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: eBayListing_FirstRow
  ): eBayListing @fdc_generated(from: "eBayListing", purpose: QUERY_SINGLE)
  """
  ✨ List `Integration` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  integrations(
    """
    Filter condition to narrow down the query results.
    """
    where: Integration_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Integration_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Integration_Having
  ): [Integration!]! @fdc_generated(from: "Integration", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Order` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  orders(
    """
    Filter condition to narrow down the query results.
    """
    where: Order_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Order_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Order_Having
  ): [Order!]! @fdc_generated(from: "Order", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ProductTemplate` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  productTemplates(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductTemplate_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductTemplate_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ProductTemplate_Having
  ): [ProductTemplate!]! @fdc_generated(from: "ProductTemplate", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
  """
  ✨ List `eBayListing` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  eBayListings(
    """
    Filter condition to narrow down the query results.
    """
    where: eBayListing_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [eBayListing_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: eBayListing_Having
  ): [eBayListing!]! @fdc_generated(from: "eBayListing", purpose: QUERY_MULTIPLE)
}
