name: AWS ECR Push

on:
  push:
    branches: ["main"]
    tags: ["*"]

permissions:
  contents: read
  id-token: write

jobs:

  debug-build:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
  
        # Create a temporary Dockerfile.debug by injecting probe lines into your existing Dockerfile
        - name: Generate Dockerfile.debug with probes
          run: |
            cp Dockerfile Dockerfile.debug
  
            # Inject build-time probe right after "RUN npm run build" in the builder stage
            sed -i 's|RUN npm run build|RUN npm run build \&\& /bin/sh -lc '\''for k in APP_ID DEV_ID CERT_ID REDIRECT_URI; do if [ -n "$(eval echo \${$k})" ]; then echo "BUILD_ARG:$k=SET"; else echo "BUILD_ARG:$k=EMPTY"; fi; done'\''|' Dockerfile.debug
  
            # Ensure runner stage promotes ARG->ENV (idempotent if already present)
            # Append ARG/ENV to runner stage if missing
            if ! grep -q "^FROM base AS runner" Dockerfile.debug; then
              echo "Runner stage not found"; exit 1
            fi
            awk '
              BEGIN{inrunner=0}
              /^FROM base AS runner/{inrunner=1; print; next}
              inrunner && /^WORKDIR / && !seen++ {
                print "ARG APP_ID"
                print "ARG DEV_ID"
                print "ARG CERT_ID"
                print "ARG REDIRECT_URI"
                print "ENV APP_ID=$APP_ID \\"
                print "    DEV_ID=$DEV_ID \\"
                print "    CERT_ID=$CERT_ID \\"
                print "    REDIRECT_URI=$REDIRECT_URI \\"
                print "    PORT=3000"
              }
              {print}
            ' Dockerfile.debug > Dockerfile.debug.tmp && mv Dockerfile.debug.tmp Dockerfile.debug
  
            echo "=== Dockerfile.debug ==="
            sed -n '1,200p' Dockerfile.debug
  
        - name: Debug build (no push) with known-present markers
          run: |
            docker build --progress=plain \
              --build-arg APP_ID=${{ secrets.APP_ID_PROD }} \
              --build-arg DEV_ID=${{ secrets.DEV_ID_PROD }} \
              --build-arg CERT_ID=${{ secrets.CERT_ID_PROD }} \
              --build-arg REDIRECT_URI=${{ secrets.REDIRECT_URI_PROD }} \
              -t debugimg:local -f Dockerfile.debug .
  
        - name: Inspect runtime envs inside built image
          run: |
            docker run --rm debugimg:local /bin/sh -lc '
              for k in APP_ID DEV_ID CERT_ID REDIRECT_URI; do
                v=$(printenv $k)
                if [ -n "$v" ]; then
                  echo "RUNTIME_ENV:$k=SET"
                else
                  echo "RUNTIME_ENV:$k=MISSING"
                  exit 2
                fi
              done
            '
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: "051758750426"
      AWS_REGION: "eu-central-1"
      ECR_REPO: "autobay-next-js"

    steps:
      - uses: actions/checkout@v4

      - id: ecr-publish
        name: Build, tag, and push to ECR
        uses: bitovi/github-actions-ecr-publish@v0.1.0
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws_default_region: ${{ env.AWS_REGION }}
          aws_ecr_repo_name: ${{ env.ECR_REPO }}
          build_args: >
            --build-arg APP_ID=${{ secrets.APP_ID_PROD }}
            --build-arg DEV_ID=${{ secrets.DEV_ID_PROD }}
            --build-arg CERT_ID=${{ secrets.CERT_ID_PROD }}
            --build-arg REDIRECT_URI=${{ secrets.REDIRECT_URI_PROD }}

      - name: Output image refs
        run: |
          echo "Image: ${{ env.image }}"
          echo "Tag:   ${{ env.tag }}"
          echo "FQDN:  ${{env.AWS_ACCOUNT_ID}}.dkr.ecr.${{env.AWS_REGION}}.amazonaws.com/${{env.ECR_REPO}}:${{ env.tag }}"
